@extends('somos.layout.template')


@section('title')
    aqui √© a somos oceano
@endsection


@section('css')
    <link rel="stylesheet" href="{{ asset('css/somos/home/desktop.css') }}" media="all">
@endsection






<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
@section('content')
    <header>
        <h1><span class="tit">S.O.M.O.S.</span> <span class='sub'>Oceano</span></h1>
        <span id="subtitulo">
            Sistema de observa√ß√£o e
            monitoramento da sa√∫de dos
            oceanos
        </span>
        <img id='horse' src={{ asset('img/home/CavaloMarinho.svg') }}>
    </header>

    @include('somos.layout.partes.menu')

    <main id="descricaoProjeto">
        <p>O oceano √© o pulm√£o azul do planeta ‚Äî e cuidar dele √© urgente. Nosso sistema de observa√ß√£o e monitoramento da
            sa√∫de do oceano oferece dados em tempo real, an√°lises precisas e alertas estrat√©gicos sobre condi√ß√µes
            ambientais, qualidade da √°gua, biodiversida de marinha e mudan√ßas clim√°ticas. Ideal para pesquisadores,
            governos, ONGs e empresas do setor, a plataforma integra tecnologia de ponta e intelig√™ncia ambiental para
            decis√µes mais sustent√°veis e seguras.‚Ä® Com uma interface intuitiva e acesso remoto, voc√™ acompanha os
            indicadores oce√¢nicos de forma cont√≠nua, contribuindo diretamente para a preserva√ß√£o dos ecossistemas marinhos.
            Seja parte da transforma√ß√£o azul. Monitore, entenda e proteja o oceano com dados confi√°veis e em tempo real.
        </p>
        <img id='imgCentro' src={{ asset('img/home/imagem-texto-main.jpg') }}>
    </main>

    @include('somos.layout.partes.cards')

    @include('somos.layout.partes.textoRapido')

    @include('somos.layout.partes.textoRapido2')

    <section id="teste"></section>
@endsection
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->
<!------------------------------------------------------------------------------------------->



@section('footer')
    <!-------------------------------------------------------------------->
    <!-------------------------------------------------------------------->
    <!-------------------------------------------------------------------->
    <!-------------------------------------------------------------------->

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const itens = document.querySelectorAll('#MeusCards li');

            const observer = new IntersectionObserver((entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        const index = Array.from(itens).indexOf(entry.target);
                        setTimeout(() => {
                            entry.target.classList.add('aparece');
                        }, index * 500);
                    } else {
                        entry.target.classList.remove('aparece');
                    }
                });
            }, {
                threshold: 0.1
            });

            itens.forEach(item => observer.observe(item));
        });
    </script>

    <!-------------------------------------------------------------------->
    <!-------------------------------------------------------------------->
    <!-------------------------------------------------------------------->
    <!-------------------------------------------------------------------->

    <script>
        jQuery(document).ready(function() {});


        function verificarLarguraTela() {
            if (window.innerWidth > 768.5) {
                // A√ß√µes para telas maiores que 1369 pixels
                console.log("Tela maior que 768px");
                jQuery('nav').show();
                jQuery('#fundaoMenu').remove();
            } else {

                console.log("Tela menor ou igual a 768px");
                jQuery('#fundaoMenu').remove();
                jQuery('body').append('<div id="fundaoMenu"> </div>');
                jQuery('nav').hide();
                jQuery('#hamburguer').click(function() {
                    jQuery('#fundaoMenu').addClass('menunBackground');
                    jQuery('nav').addClass('showMenu');
                    jQuery('nav').show();
                })



                jQuery('#fundaoMenu').click(function() {

                    jQuery("nav").removeClass('showMenu');
                    jQuery("nav").addClass('FechaMenu');

                    jQuery('#fundaoMenu').removeClass('menunBackground');



                    setTimeout(() => {
                        jQuery("nav").removeClass('FechaMenu');
                        jQuery("nav").hide();
                        jQuery('#fundaoMenu').removeClass('menunBackground');
                        //jQuery('#fundaoMenu').hide();
                        console.log("fechando tudo")
                    }, 1500);
                })


            }
        }
        verificarLarguraTela();
        window.addEventListener('resize', verificarLarguraTela);
    </script>
    <!-------------------------------------------------------------------->
    <!-------------------------------------------------------------------->
    <!-------------------------------------------------------------------->
    <!-------------------------------------------------------------------->


    <script>
        const horse = document.getElementById('horse');

        // üß≠ Ajustes de centraliza√ß√£o do cavalo em rela√ß√£o ao cursor
        const offsetX = horse.offsetWidth / 2;
        const offsetY = horse.offsetHeight / 2;

        // üìå Posi√ß√£o inicial do cavalo na tela (usada como origem para retorno e limites)
        const horseRect = horse.getBoundingClientRect();
        const originX = horseRect.left;
        const originY = horseRect.top;

        // üéØ Coordenadas de movimento
        let currentX = originX;
        let currentY = originY;
        let targetX = originX;
        let targetY = originY;

        // üîÑ Flags de controle de retorno e "jitter" (movimento aleat√≥rio ao voltar)
        let isReturning = false;
        let hasJitter = false;
        let mouseIdleTimer = null;

        // Inicializa a posi√ß√£o do cavalo
        horse.style.transform = `translate(0px, 0px)`;

        // üöÄ VELOCIDADE DE MOVIMENTO (ajuste principal)
        const speed = 0.000000172;
        // üí° Valor entre 0 e 1 ‚Äî quanto maior, mais r√°pido o movimento
        // Ex: 0.05 = lento, 0.5 = moderado, 1 = muito r√°pido
        // OBS: Esse valor √© usado para calcular os fatores de suavidade abaixo

        // üéõÔ∏è Limites de suavidade para interpola√ß√£o
        const MAX_SMOOTHNESS = 0.115; // suavidade m√°xima poss√≠vel
        const MIN_SMOOTHNESS = 0.01; // suavidade m√≠nima (mais lento)

        // üîÅ Suavidade real usada no movimento ativo (mouse em movimento)
        const MOVE_SMOOTHNESS = MIN_SMOOTHNESS + (MAX_SMOOTHNESS - MIN_SMOOTHNESS) * speed;

        // üîÅ Suavidade usada no retorno autom√°tico (quando mouse para)
        const RETURN_SMOOTHNESS = MOVE_SMOOTHNESS * 0.5;
        // Quanto menor, mais suave/lento √© o retorno

        // üéØ DIST√ÇNCIA M√ÅXIMA permitida do cavalo em rela√ß√£o √† origem
        const MAX_DISTANCE = 100;
        // Evita que o cavalo "corra demais" atr√°s do cursor

        // ‚è±Ô∏è TEMPO DE INATIVIDADE para disparar o retorno (em milissegundos)
        const IDLE_TIMEOUT = 1000;
        // Ex: 1000 = 1 segundo parado para voltar

        // üåÄ Fun√ß√£o que gera um deslocamento aleat√≥rio entre [min, max] em px
        const getRandomOffset = (min, max) => {
            const magnitude = Math.floor(Math.random() * (max - min + 1)) + min;
            return Math.random() < 0.5 ? -magnitude : magnitude;
        };

        // üñ±Ô∏è Listener de movimento do mouse
        document.addEventListener('mousemove', (event) => {
            const mouseX = event.clientX - offsetX;
            const mouseY = event.clientY - offsetY;

            const dx = mouseX - originX;
            const dy = mouseY - originY;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance > MAX_DISTANCE) {
                // Limita a dist√¢ncia m√°xima com base no √¢ngulo
                const angle = Math.atan2(dy, dx);
                targetX = originX + Math.cos(angle) * MAX_DISTANCE;
                targetY = originY + Math.sin(angle) * MAX_DISTANCE;
            } else {
                // Alvo √© diretamente onde o mouse est√° (dentro do limite)
                targetX = mouseX;
                targetY = mouseY;
            }

            // Resetando os estados de retorno e jitter
            isReturning = false;
            hasJitter = false;

            // Reinicia o temporizador de inatividade
            clearTimeout(mouseIdleTimer);
            mouseIdleTimer = setTimeout(() => {
                isReturning = true;

                // Aplica "jitter" uma √∫nica vez por retorno
                if (!hasJitter) {
                    const jitterX = getRandomOffset(5, 20); // movimenta√ß√£o aleat√≥ria horizontal
                    const jitterY = getRandomOffset(5, 20); // movimenta√ß√£o aleat√≥ria vertical
                    targetX = originX + jitterX;
                    targetY = originY + jitterY;
                    hasJitter = true;
                }
            }, IDLE_TIMEOUT);
        });

        // üåÄ Loop de anima√ß√£o cont√≠nuo com requestAnimationFrame
        function animate() {
            const smoothness = isReturning ? RETURN_SMOOTHNESS : MOVE_SMOOTHNESS;

            // Interpola√ß√£o suave (easing manual)
            currentX += (targetX - currentX) * smoothness;
            currentY += (targetY - currentY) * smoothness;

            // Aplica√ß√£o do deslocamento via transform
            const dx = currentX - originX;
            const dy = currentY - originY;

            horse.style.transform = `translate(${dx}px, ${dy}px)`;

            requestAnimationFrame(animate);
        }

        animate();
    </script>
@endsection
